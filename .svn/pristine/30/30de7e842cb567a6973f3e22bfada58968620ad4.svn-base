package edu.hm.cs.kniffel.model.full;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import edu.hm.cs.kniffel.model.GameState;
import edu.hm.cs.kniffel.model.Player;

public class Game extends WriteableGame implements Changeable {
	final RollableDiceCup diceCup;
	final List<Player> players;
	int currentPlayer;
	GameState gameState;
	
	public Game(int numPlayers, int numDice, List<String> ruleNames) {
		if (numPlayers < 1) {
			throw new IllegalArgumentException();
		} else if (ruleNames == null) {
			throw new NullPointerException();
		} else if (ruleNames.size() == 0) {
			throw new IllegalArgumentException();
		} else if (numDice == 0) {
			throw new IllegalArgumentException();
		}
		
		diceCup = new DiceCup(this, numDice);
		players = new ArrayList<>();
		
		for (int counter = 0; counter < numPlayers; counter++) {
			players.add(new Player(new PlayerProtocol(this, ruleNames)));
		}
		
		currentPlayer = (int) (Math.random() * players.size());
	}
	
	@Override
	public Player getCurrentPlayer() {
		return players.get(currentPlayer);
	}

	@Override
	public GameState getState() {
		return gameState;
	}
	
	@Override
	public void nextPlayer() {
		currentPlayer = (currentPlayer + 1) % players.size();
		notifyChange();
	}

	@Override
	public void setState(GameState gameState) {
		this.gameState = gameState;
		notifyChange();
	}
	
	@Override
	public RollableDiceCup getDiceCup() {
		return diceCup;
	}

	@Override
	public void notifyChange() {
		setChanged();
		notifyObservers();
	}

	@Override
	public int getNumPlayers() {
		return players.size();
	}
}