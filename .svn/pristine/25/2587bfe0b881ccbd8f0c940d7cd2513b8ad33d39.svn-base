package edu.hm.cs.kniffel.gui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;

import edu.hm.cs.kniffel.controller.GameLogic;
import edu.hm.cs.kniffel.controller.rules.Rules;
import edu.hm.cs.kniffel.model.Player;
import edu.hm.cs.kniffel.model.ReadonlyGame;
import edu.hm.cs.kniffel.model.RuleSection;

public class ScoreBoardTableModel implements TableModel {
	
	private static final String RULE_COLUMN_NAME = "Rule";
	private static final String SUM_UPPER_NAME = "Sum Part 1";
	private static final String SUM_LOWER_NAME = "Sum Part 2";
	private static final String TOTAL_NAME = "Total";

	private final ReadonlyGame game;
	private final List<TableRow> rows;

	public ScoreBoardTableModel(ReadonlyGame game, Rules rules) {
		this.game = game;
		rows = new ArrayList<>();
		
		rules.getRuleNames(RuleSection.Upper).stream().forEach(rule -> {
			rows.add(new TableRow(rule, player -> {
				return Integer.toString(player.getProtocol(RuleSection.Upper).getPoints(rule));
			}));
		});
		
		rows.add(new TableRow(SUM_UPPER_NAME, player -> Integer.toString(player.getProtocol(RuleSection.Upper).sum())));
		
		rules.getRuleNames(RuleSection.Lower).stream().forEach(rule -> {
			rows.add(new TableRow(rule, player -> {
				return Integer.toString(player.getProtocol(RuleSection.Lower).getPoints(rule));
			}));
		});
		
		rows.add(new TableRow(SUM_LOWER_NAME, player -> Integer.toString(player.getProtocol(RuleSection.Lower).sum())));
		rows.add(new TableRow(TOTAL_NAME, player -> {
			return Integer.toString(player.getProtocol(RuleSection.Upper).sum() + player.getProtocol(RuleSection.Lower).sum());
		}));
	}
	
	@Override
	public void addTableModelListener(TableModelListener arg0) {

	}

	@Override
	public Class<?> getColumnClass(int arg0) {
		return String.class;
	}

	@Override
	public int getColumnCount() {
		return game.getNumPlayers() + 1; // +1 bc Rule column
	}

	@Override
	public String getColumnName(int column) {
		if (column == 0) {
			return RULE_COLUMN_NAME;
		} else {
			return game.getPlayers().get(column - 1).getName();
		}
	}

	@Override
	public int getRowCount() {
		return rows.size();
	}

	@Override
	public Object getValueAt(int row, int col) {
		final String result;
		
		if (col == 0) {
			result = rows.get(row).getRowName();
		} else {
			final Player player = game.getPlayers().get(col - 1);
			result = rows.get(row).getValue(player);
		}
		
		return result;
	}

	@Override
	public boolean isCellEditable(int row, int col) {
		return false;
	}

	@Override
	public void removeTableModelListener(TableModelListener arg0) {

	}

	@Override
	public void setValueAt(Object arg0, int arg1, int arg2) {
		
	}
}
