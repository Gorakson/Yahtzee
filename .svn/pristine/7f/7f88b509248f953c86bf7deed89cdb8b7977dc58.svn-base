package edu.hm.cs.kniffel.gui;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import edu.hm.cs.kniffel.controller.GameLogic;
import edu.hm.cs.kniffel.controller.rules.Rules;
import edu.hm.cs.kniffel.model.GameState;
import edu.hm.cs.kniffel.model.ReadonlyGame;
import edu.hm.cs.kniffel.model.RuleSection;
import edu.hm.cs.kniffel.model.full.Game;
import edu.hm.cs.kniffel.model.full.WriteableGame;
import edu.hm.cs.kniffel.utilities.Updateable;

/**
 * Main class for the user interface.
 * 
 * @author Hammerschall
 * @version 1.0
 */
public class MainGUI extends JFrame implements Observer {

    /** serialVersionUID. */
    private static final long serialVersionUID = 1L;
    
    public static final int WIDTH = 800;
    public static final int HEIGHT = 480;
    
    private final ReadonlyGame game;


    /**
     * Creates the main frame that expects two additional panels.
     * 
     * @param number of players
     */
    public MainGUI(GameLogic logic, ReadonlyGame game, Rules rules) {
        this.game = game;
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(100, 100, WIDTH, HEIGHT);
    
        getContentPane().setLayout(new GridLayout(3, 0, 0, 16));
        getContentPane().add(new SwingPlayerPanel(logic, game));
        getContentPane().add(new SwingScoreBoard(game, logic, rules));
        getContentPane().add(new SwingDicePanel(logic, game));

        game.addObserver(this);
    }
    
	@Override
	public void update(Observable arg0, Object arg1) {		
		if (game.getWinner().isPresent()) {
		    System.out.println(game.getWinner().get());
		    final String dialogMessage = "Congratulations " + game.getWinner().get().getName() + ". You won!!!\n"
		            + "Would you like to save the scoreboard?";
		    JOptionPane.showMessageDialog(this, dialogMessage);
		}
		
	    repaint();
	}
	
	private void onGameOver() {
	    
	}

    /**
     * Launch the application.
     * 
     * @param args number of players
     */
    public static void main(String[] args) {
    	final int numPlayers = getNumPlayers();
    	Rules rules = new Rules();
    	WriteableGame game = new Game(numPlayers, Rules.NUM_DICE,
    			rules.getRuleNames());
    	GameLogic logic = new GameLogic(game);
        game.setState(GameState.Running);
        
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainGUI frame = new MainGUI(logic, game, rules);
                frame.setVisible(true);
            }
        });
    }
    
    private static int getNumPlayers() {
        String errorMessage = "";
        int numPlayers = 0;
        
        do {
            final String userInput = JOptionPane.showInputDialog(errorMessage + "How many players will play?");
            
            try {
                numPlayers = Integer.parseInt(userInput);
                
                if (numPlayers < Rules.MIN_NUM_PLAYERS || numPlayers > Rules.MAX_NUM_PLAYERS) {
                    errorMessage = "Please enter a number between 1 and 6.\n";
                } else {
                    errorMessage = "";
                }
            } 
            catch (NumberFormatException exception) {
                errorMessage = "Please enter a number.\n";
            }
        } while(!errorMessage.isEmpty());
        
        return numPlayers;
    }
}
