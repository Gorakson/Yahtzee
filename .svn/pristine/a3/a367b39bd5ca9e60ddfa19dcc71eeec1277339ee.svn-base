package edu.hm.cs.kniffel.model.full;

import java.util.List;
import java.util.Map;
import java.util.HashMap;

import edu.hm.cs.kniffel.utilities.Changeable;

public class PlayerProtocol {
	private final Changeable owner;
	
	private static class ProtocolEntry {
		private int score; 
		private boolean scored;
		
		private int getScore() {
			return score;
		}
		
		private void setScore(int score) {
			this.score = score;
			scored = true;
		}
		
		private boolean isScored() {
			return scored;
		}
	}
	
	private final Map<String, ProtocolEntry> protocol;
	
	public PlayerProtocol(Changeable owner, List<String> rules) {
		if (rules == null) {
			throw new NullPointerException();
		} else if (rules.size() == 0) {
			throw new IllegalArgumentException();
		} else if (owner == null) {
			throw new NullPointerException();
		}
		
		this.owner = owner;
		
		protocol = new HashMap<>();
		rules.stream().forEach(rule -> protocol.put(rule, new ProtocolEntry()));
	}
	
	public int getPoints(String ruleName) {
		
		if (!protocol.containsKey(ruleName)) {
			throw new IllegalArgumentException();
		} 
		
		return protocol.get(ruleName).getScore();
	}
	
	public void setPoints(String ruleName, int points) {
		
		if (!protocol.containsKey(ruleName)) {
			throw new IllegalArgumentException();
		} else if (points < 0) {
			throw new IllegalArgumentException();
		}
		
		protocol.get(ruleName).setScore(points);
		owner.notifyChange();
	}
	
	public boolean isScored(String ruleName) {
		
		if (!protocol.containsKey(ruleName)) {
			throw new IllegalArgumentException();
		} 
		
		return protocol.get(ruleName).isScored();
	}
	
	public int sum() {
		int sum = 0;
		
		for (ProtocolEntry entry : protocol.values()) {
			sum += entry.getScore();
		}
		
		return sum;
	}
}
