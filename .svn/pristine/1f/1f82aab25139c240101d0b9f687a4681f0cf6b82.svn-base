package edu.hm.cs.kniffel.command.full;

import edu.hm.cs.kniffel.command.CommandResult;
import edu.hm.cs.kniffel.controller.rules.Rule;
import edu.hm.cs.kniffel.model.GameState;
import edu.hm.cs.kniffel.model.Player;
import edu.hm.cs.kniffel.model.full.WriteableGame;

public class CommandWriteScore extends BaseCommand {

	final Rule rule;
	
	public CommandWriteScore(Player player, WriteableGame game, Rule rule) {
		super(player, game);
		this.rule = rule;
	}

	@Override
	public CommandResult test() {
		final CommandResult result;
		
		if (getGame().getState() != GameState.Running) {
			result = new CommandResult(false, "Game is not running.");
		} else if (!getGame().getCurrentPlayer().equals(getPlayer())) {
			result = new CommandResult(false, "Player with ID: " + getPlayer().getId() + " is not the current player.");
		} else if (!rule.check()) {
			result = new CommandResult(false, "The condition for " + rule.toString() + " is not met.");
		} else if (getPlayer().getProtocol().isScored(rule.toString())) {
			result = new CommandResult(false, "The box " + rule.toString() + " is already filled in.");
		} else {
			result = new CommandResult();
		}
			
		return result;
	}

	@Override
	public CommandResult execute() {
		final CommandResult result = test();
		
		if (result.getResult()) {
			getPlayer().getProtocol().setPoints(rule.toString(), rule.numPoints());
		} else {
			throw new IllegalStateException(result.getDescription());
		}
		
		return result;
	}

}
