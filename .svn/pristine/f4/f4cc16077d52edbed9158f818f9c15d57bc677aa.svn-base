package edu.hm.cs.kniffel.logic.command;

import edu.hm.cs.kniffel.model.GameState;
import edu.hm.cs.kniffel.model.Player;
import edu.hm.cs.kniffel.model.ReadonlyDice;
import edu.hm.cs.kniffel.model.full.WriteableGame;

public class CommandToggleDiceActive implements Command {

	private static final int MAX_ROLL_COUNT = 300;
	private final ReadonlyDice dice;
	
	public CommandToggleDiceActive(ReadonlyDice dice) {
		this.dice = dice;
	}
	
	@Override
	public CommandResult test(WriteableGame game, Player player) {
		final CommandResult result;
		
		if (game.getState() != GameState.Running) {
			result = new CommandResult(false, "Game is not running.");
		} else if (!game.getCurrentPlayer().equals(player)) {
			result = new CommandResult(false, "Player with ID: " + player.getId() + " is not the current player.");
		} else if (game.getDiceCup().getRollsCount() >= MAX_ROLL_COUNT) {
			result = new CommandResult(false, "Player with ID: " + player.getId() + " has already rolled " + MAX_ROLL_COUNT + " times");
		} else if (game.getDiceCup().getRollsCount() < 1) {
			result = new CommandResult(false, "You need to roll once before you can set aside dices.");
		} else {
			result = new CommandResult();
		}
		
		return result;
	}

	@Override
	public CommandResult execute(WriteableGame game, Player player) {
		final CommandResult result = test(game, player);
		
		if (result.getResult()) {
			game.getDiceCup().active(dice, game.getDiceCup().isInactive(dice));
		} else {
			throw new IllegalStateException(result.getDescription());
		}
		
		return result;
	}

}
