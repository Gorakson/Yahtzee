/**
 * Hochschule München, Fakultät 07. 
 * Softwareentwicklung II Praktikum, IF2A, SS2016
 * Lösung der 2. Aufgabe
 * Oracle Java SE 8u77
 * OS Win7 64, RAM 8GB, CPU 4x2.5GHz x64
 */

package edu.hm.cs.kniffel.logic.command;

import edu.hm.cs.kniffel.model.GameState;
import edu.hm.cs.kniffel.model.Player;
import edu.hm.cs.kniffel.model.full.WriteableGame;

/**
 * A command which will handle the end of the turn.
 * That means it will either proceed the game with the next player or
 * will determine a winner and set the games state to GameOver.
 * 
 * @author Thomas Pfaffinger, thomas.pfaffinger@hm.edu
 * @version 1.0
 */
public class CommandTurnEnd implements Command {

    @Override
    public CommandResult test(WriteableGame game, Player player) {
        final CommandResult result;

        if (game.getState() != GameState.TurnEnd) {
            result = new CommandResult(false, "Turn has not ended yet.");
        } else {
            result = new CommandResult();
        }

        return result;
    }

    @Override
    public CommandResult execute(WriteableGame game, Player player) {
        final CommandResult result = test(game, player);

        if (result.getResult()) {
            boolean isGameOver = true;

            isGameOver &= game.getPlayers().stream().map(thePlayer -> thePlayer.getProtocol())
                    .allMatch(protocol -> protocol.allScored());

            if (isGameOver) {
                Player winner = null;
                int winnerScore = Integer.MIN_VALUE;

                for (Player thePlayer : game.getPlayers()) {
                    final int playerScore = thePlayer.getProtocol().sum();
                    if (playerScore > winnerScore) {
                        winner = thePlayer;
                        winnerScore = playerScore;
                    }
                }

                game.setWinner(winner);
                game.setState(GameState.GameOver);

            }
            else {
                game.getDiceCup().reset();
                game.nextPlayer();
                game.setState(GameState.Running);
            }
        } else {
            throw new IllegalStateException(result.getDescription());
        }

        return result;
    }
}
