package edu.hm.cs.kniffel.model.full;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import edu.hm.cs.kniffel.model.ReadonlyDice;

public class DiceCup implements RollableDiceCup {
	
	private final Changeable owner;
	private final List<RollableDice> dices;
	private int rollsCount;
	
	public DiceCup(Changeable owner, int size) {
		if (owner == null) {
			throw new NullPointerException();
		} else if (size < 1) {
			throw new IllegalArgumentException();
		}
		
		this.owner = owner;
		rollsCount = 0;
		dices = new ArrayList<>();
		
		for (int index = 0; index < size; index++) {
			dices.add(new Dice());
		}
	}

	@Override
	public void roll(int... diceIndizes) {		
		for (int index = 0; index < diceIndizes.length; index++) {
			dices.get(index).roll();
			System.out.println("Rolling dice# " + (index + 1));
		}
		
		rollsCount++;
		owner.notifyChange();
	}

	@Override
	public List<Integer> getValues() {
		return Collections.unmodifiableList(dices.stream().map(dice -> dice.getValue()).collect(Collectors.toList()));
	}
	
	@Override
	public int getRollsCount() {
		return rollsCount;
	}

	@Override
	public void resetRollsCount() {
		rollsCount = 0;		
	}

	@Override
	public List<ReadonlyDice> getDices() {
		return Collections.unmodifiableList(dices);
	}
}
