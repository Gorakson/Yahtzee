package edu.hm.cs.kniffel.controller.rules;

import java.util.HashMap;
import java.util.Map;

import edu.hm.cs.kniffel.model.full.WriteableDiceCup;

public class ThreeOfAKind extends BaseRule {

	private static final int MIN_COUNT = 3;
	
	public ThreeOfAKind(WriteableDiceCup diceCup) {
		super(diceCup);
	}

	@Override
	public boolean check() {
		final Map<Integer, Integer> counts = new HashMap<>();
		
		getDiceCup().getValues().forEach(value -> {
			if (counts.containsKey(value)) {
				counts.put(value, counts.get(value) + 1);
			} else {
				counts.put(value, 1);
			}
		});
		
		return counts.values().stream().anyMatch(value -> value >= MIN_COUNT);
	}

	@Override
	public int numPoints() {
		final int result;
		
		if (check()) {
			int sum = 0;
			
			for (int diceValue : getDiceCup().getValues()) {
				sum += diceValue;
			}
			
			result = sum;
		} else {
			result = 0;
		}
		
		return result;
	}

}
